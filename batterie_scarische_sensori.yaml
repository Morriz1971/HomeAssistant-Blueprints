blueprint:
  name: Controllo del livello della batterie dei sensori
  description: Controlla regolarmente tutti i sensori che hanno device-class 'battery' se ha superato la soglia indicata e in tal caso esegue un'azione.
  domain: automation
  source_url: https://github.com/Morriz1971/HomeAssistant-Blueprints/blob/main/batterie_scarische_sensori.yaml


  # Blueprint Inputs
  input:
    threshold:
      name: Soglia della batteria sotto la quale si assume sia scarica
      description: Il livello della batteria sotto il quale si assume che la batteria sia scarica.
      default: 20
      selector:
        number:
          min: 5.0
          max: 100.0
          unit_of_measurement: '%'
          mode: slider
          step: 5.0

    time:
      name: Ora alla quale eseguire il test
      description: Il test del livello della batteria viene eseguito ad una determinata ora
      default: '10:00:00'
      selector:
        time: {}
    # Qui l'utente sceglie in quali giorni della settimana deve essere eseguito il test.
    monday_enabled:
      name: 'Lunedì'
      description: 'Esegue il test lunedì'
      default: True
      selector:
        boolean:
    tuesday_enabled:
      name: Martedì
      description: 'Esegue il test martedì'
      default: True
      selector:
        boolean:
    wednesday_enabled:
      name: Mercoledì
      description: 'Esegue il test mercoledì'
      default: True
      selector:
        boolean:
    thursday_enabled:
      name: Giovedì
      description: 'Esegue il test giovedì'
      default: True
      selector:
        boolean:
    friday_enabled:
      name: Venerdì
      description: 'Esegue il test venerdì'
      default: True
      selector:
        boolean:
    saturday_enabled:
      name: Sabato
      description: 'Esegue il test sabato'
      default: True
      selector:
        boolean:
    sunday_enabled:
      name: Domenica
      description: 'Esegue il test domenica'
      default: True
      selector:
        boolean:

    exclude:
      name: Sensori esclusi
      description: Sensori batteria (es. smartphone) da escludere dal controllo. Solo le entities sono supportate, areas e devices devono essere espanse!
      default: {}
      selector:
        target:
          entity:
            device_class: battery

    actions:
      name: Azioni
      description: Notifiche o similari da essere lanciate. {{sensors}} è rimpiazzato con i nomi dei sensori che hanno la batteria scarica.
      selector:
        action:


variables:
  monday_enabled: !input 'monday_enabled'
  tuesday_enabled: !input 'tuesday_enabled'
  wednesday_enabled: !input 'wednesday_enabled'
  thursday_enabled: !input 'thursday_enabled'
  friday_enabled: !input 'friday_enabled'
  saturday_enabled: !input 'saturday_enabled'
  sunday_enabled: !input 'sunday_enabled'

  current_day: '{{ now().weekday() | int }}'

  threshold: !input 'threshold'

  exclude: !input 'exclude'

  sensors: >-
    {% set result = namespace(sensors=[]) %}
    {% for state in states.sensor | selectattr('attributes.device_class', '==', 'battery') %}
      {% if exclude.entity_id is defined %}
        {% if 0 <= state.state | int(-1) < threshold | int and not state.entity_id in exclude.entity_id %}
          {% set result.sensors = result.sensors + [state.name ~ ' (' ~ state.state ~ ' %)'] %}
        {% endif %}
      {% else %}
        {% if 0 <= state.state | int(-1) < threshold | int %}
          {% set result.sensors = result.sensors + [state.name ~ ' (' ~ state.state ~ ' %)'] %}
        {% endif %}
      {% endif %}
    {% endfor %}
    {% for state in states.binary_sensor | selectattr('attributes.device_class', '==', 'battery') | selectattr('state', '==', 'on') %}
      {% if exclude.entity_id is defined %}
        {% if not state.entity_id in exclude.entity_id %}
          {% set result.sensors = result.sensors + [state.name] %}
        {% endif %}
      {% else %}
        {% set result.sensors = result.sensors + [state.name] %}
      {% endif %}
    {% endfor %}
    {{"⤵ \n- "}}{{result.sensors|join('\n- ')}}


# Triggers
trigger:
  - platform: time
    at: !input 'time'


# Condizioni usate per determinare se l'automazione deve essere eseguita per specifici eventi trigger
condition:
# Check if the automation is supposed to be executed during that specific weekday
  - condition: template
    value_template: >-
        {{ 
          (current_day == 0 and monday_enabled) or 
          (current_day == 1 and tuesday_enabled) or 
          (current_day == 2 and wednesday_enabled) or
          (current_day == 3 and thursday_enabled) or 
          (current_day == 4 and friday_enabled) or
          (current_day == 5 and saturday_enabled) or
          (current_day == 6 and sunday_enabled)
        }}


  # Check if the sensors list is not empty
  - condition: template
    value_template: >-
        {{ sensors != "⤵ \n-"}}


# Actions
action:
  - choose: []
    default: !input 'actions'
  
mode: single
max_exceeded: silent
